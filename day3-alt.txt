package main

import (
	"fmt"
	"strconv"
	"strings"
)

type point struct {
	x int
	y int
}

func advent3A(test string) (int, error) {
	grid := map[point]int{}
	minDistance := 99999999
	for i, wire := range strings.Split(test, "\n") {
		p := point{0, 0}
		for _, wire := range strings.Split(wire, ",") {
			direction := wire[0]
			distance, _ := strconv.Atoi(wire[1:])
			for j := 0; j < distance; j++ {
				if direction == 'R' {
					p.x++
				} else if direction == 'L' {
					p.x--
				} else if direction == 'U' {
					p.y++
				} else if direction == 'D' {
					p.y--
				}
				if _, ok := grid[p]; !ok {
					grid[p] = 1
				} else if Abs(p.x)+Abs(p.y) < minDistance && i != 0 {
					// crossed
					println(fmt.Sprintf("X @ %v, %v -> %d", p.x, p.y, (Abs(p.x) + Abs(p.y))))
					minDistance = Abs(p.x) + Abs(p.y)
				}
			}
		}
	}
	//printMatrix(grid)
	return minDistance, nil
}

func advent3B(test string) (int, error) {
	for _, s := range strings.Split(test, "\n") {
		println(fmt.Sprintf("%v", s))
	}
	return 0, nil
}

func findStart(grid [][]rune) (int, int) {
	for i := 0; i < len(grid); i++ {
		for j := 0; j < len(grid[i]); j++ {
			if grid[i][j] == 'o' {
				return i, j
			}
		}
	}
	return 0, 0
}

func closestIntersection(grid [][]rune) int {
	startX, startY := findStart(grid)
	print(fmt.Sprintf("%v, %v", startX, startY))
	println()
	closest := 4294967295
	for i := 0; i < len(grid); i++ {
		for j := 0; j < len(grid[i]); j++ {
			// if grid[i][j] == 'X' {
			// 	println(fmt.Sprintf("X @ %v, %v -> %d", i, j, (Abs(i-startX) + Abs(j-startY))))
			// }
			if grid[i][j] == 'X' && (Abs(i-startX)+Abs(j-startY)) < closest {
				closest = Abs(i-startX) + Abs(j-startY)
			}
		}
	}
	return closest
}

func printMatrix(grid [][]rune) {
	println()
	for i := 0; i < len(grid); i++ {
		for j := 0; j < len(grid[i]); j++ {
			print(fmt.Sprintf("%s", string(grid[i][j])))
		}
		println()
	}
}
